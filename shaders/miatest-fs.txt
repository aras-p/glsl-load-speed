#extension GL_ARB_shader_texture_lod : require
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct MySurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Reflectivity;
    float Specular;
    float Roughness;
    float Alpha;
};
struct Input {
    vec2 uv_MainTex;
    vec2 uv_BumpMap;
    vec3 viewDir;
    vec3 worldRefl;
    vec3 worldNormal;
    vec3 TtoW0;
    vec3 TtoW1;
    vec3 TtoW2;
};
struct v2f_surf {
    vec4 pos;
    vec4 pack0;
    vec3 viewDir;
    vec4 TtoW0;
    vec4 TtoW1;
    vec4 TtoW2;
    vec3 lightDir;
    vec3 vlight;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform sampler2D _BumpMap;
uniform vec4 _Color;
uniform sampler2D _EnvCube;
uniform float _Falloff;
uniform sampler2D _MainReflectivityTex;
uniform sampler2D _MainRoughnessTex;
uniform sampler2D _MainTex;
uniform float _Metalic;
uniform float _Refl0;
uniform float _Refl90;
uniform float _Reflectivity;
uniform float _Rolloff;
uniform float _Roughness;
uniform float _Roughness2;

uniform vec4 unity_SHAb;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHC;
uniform vec4 _LightColor0;
vec4 xlat_mutable_LightColor0;
vec3 UnpackNormal( in vec4 packednormal );
vec3 ShadeSH9( in vec4 normal );
vec4 SampleReflTex( in sampler2D refl, in vec3 dir, in float mipLevel0, in float mipLevel1, in float mipFrac );
vec4 GlossyReflectionTerm( in Input IN, in sampler2D refl, in vec3 normal, in float Q, in float LOD );
float EvalMipLevel( in vec3 uvw, in float texResolution );
vec3 GlobalIllumination( in Input IN, in MySurfaceOutput s );
void surf( in Input IN, inout MySurfaceOutput o );
float OrenNayarTerm( in float roughness, in vec3 normal, in vec3 lightDir, in vec3 viewDir );
float LambertTermWithRolloff( in vec3 normal, in vec3 lightDir );
float FresnelTerm( in float refl0, in float refl90, in float cosA );
float CTRoughnessTerm( in float roughness, in float NdotH );
float CTGeometricTerm( in float NdotL, in float NdotH, in float NdotV, in float VdotH );
float BlinnTermWithRolloff( in vec3 normal, in vec3 halfDir );
float CookTorranceTerm( in float roughness, in float refl0, in float refl90, in vec3 normal, in vec3 lightDir, in vec3 viewDir );
vec4 LightingOrenNayar_CookTorrance( in MySurfaceOutput s, in vec3 lightDir, in vec3 viewDir, in float atten );
vec4 frag_surf( in v2f_surf IN );
vec3 UnpackNormal( in vec4 packednormal ) {
    vec3 normal;
    normal.xy  = ((packednormal.wy  * 2.00000) - 1.00000);
    normal.z  = sqrt( ((1.00000 - (normal.x  * normal.x )) - (normal.y  * normal.y )) );
    return normal;
}
vec3 ShadeSH9( in vec4 normal ) {
    vec3 x1;
    vec4 vB;
    vec3 x2;
    float vC;
    vec3 x3;
    x1.x  = dot( unity_SHAr, normal);
    x1.y  = dot( unity_SHAg, normal);
    x1.z  = dot( unity_SHAb, normal);
    vB = (normal.xyzz  * normal.yzzx );
    x2.x  = dot( unity_SHBr, vB);
    x2.y  = dot( unity_SHBg, vB);
    x2.z  = dot( unity_SHBb, vB);
    vC = ((normal.x  * normal.x ) - (normal.y  * normal.y ));
    x3 = (unity_SHC.xyz  * vC);
    return ((x1 + x2) + x3);
}
vec4 SampleReflTex( in sampler2D refl, in vec3 dir, in float mipLevel0, in float mipLevel1, in float mipFrac ) {
    return mix( xll_tex2Dlod( refl, vec4( dir, mipLevel0)), xll_tex2Dlod( refl, vec4( dir, mipLevel1)), vec4( mipFrac));
}
vec4 GlossyReflectionTerm( in Input IN, in sampler2D refl, in vec3 normal, in float Q, in float LOD ) {
    float W;
    vec4 o;
    float mipLevel0;
    float mipLevel1;
    float mipFrac;
    vec3 worldRefl;
    W = (Q / pow( 2.00000, 0.500000));
    o = vec4( 0.000000);
    mipLevel0 = floor( LOD );
    mipLevel1 = (mipLevel0 + 1.00000);
    mipFrac = fract( LOD );
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( Q, 0.000000, 0.000000))), dot( IN.TtoW1, (normal + vec3( Q, 0.000000, 0.000000))), dot( IN.TtoW2, (normal + vec3( Q, 0.000000, 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( ( -Q ), 0.000000, 0.000000))), dot( IN.TtoW1, (normal + vec3( ( -Q ), 0.000000, 0.000000))), dot( IN.TtoW2, (normal + vec3( ( -Q ), 0.000000, 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( 0.000000, ( -Q ), 0.000000))), dot( IN.TtoW1, (normal + vec3( 0.000000, ( -Q ), 0.000000))), dot( IN.TtoW2, (normal + vec3( 0.000000, ( -Q ), 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( 0.000000, Q, 0.000000))), dot( IN.TtoW1, (normal + vec3( 0.000000, Q, 0.000000))), dot( IN.TtoW2, (normal + vec3( 0.000000, Q, 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( W, W, 0.000000))), dot( IN.TtoW1, (normal + vec3( W, W, 0.000000))), dot( IN.TtoW2, (normal + vec3( W, W, 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( ( -W ), W, 0.000000))), dot( IN.TtoW1, (normal + vec3( ( -W ), W, 0.000000))), dot( IN.TtoW2, (normal + vec3( ( -W ), W, 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( W, ( -W ), 0.000000))), dot( IN.TtoW1, (normal + vec3( W, ( -W ), 0.000000))), dot( IN.TtoW2, (normal + vec3( W, ( -W ), 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( ( -W ), ( -W ), 0.000000))), dot( IN.TtoW1, (normal + vec3( ( -W ), ( -W ), 0.000000))), dot( IN.TtoW2, (normal + vec3( ( -W ), ( -W ), 0.000000)))));
    o += SampleReflTex( refl, worldRefl, mipLevel0, mipLevel1, mipFrac);
    o /= 8.00000;
    return o;
}
float EvalMipLevel( in vec3 uvw, in float texResolution ) {
    vec3 dxSize;
    vec3 dySize;
    vec3 dTexCoords;
    float fMinTexCoordDelta;
    float fMipLevel;
    dxSize = dFdx( uvw );
    dySize = dFdy( uvw );
    dTexCoords = ((dxSize * dxSize) + (dySize * dySize));
    fMinTexCoordDelta = (max( dTexCoords.z , max( dTexCoords.x , dTexCoords.y )) * texResolution);
    fMipLevel = max( (0.500000 * log2( fMinTexCoordDelta )), 0.000000);
    return fMipLevel;
}
vec3 GlobalIllumination( in Input IN, in MySurfaceOutput s ) {
    vec3 normal;
    vec3 worldRefl;
    vec3 worldN;
    float Q;
    float LOD;
    vec3 refl;
    vec3 ambient;
    normal = normalize( s.Normal );
    worldRefl = normalize( reflect( IN.worldRefl, vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal))) );
    worldN = vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal));
    Q = (0.0825000 * (1.00000 - pow( (1.00000 - max( 0.000000, (_Roughness - 0.0330000))), 2.00000)));
    LOD = ((1.25000 * (1.00000 - pow( (1.00000 - max( 0.000000, _Roughness)), 2.00000))) * 8.00000);
    LOD = max( EvalMipLevel( worldRefl, 256.000), LOD);
    refl = GlossyReflectionTerm( IN, _EnvCube, normal, Q, LOD).xyz ;
    refl *= mix( vec3( 1.00000, 1.00000, 1.00000), s.Albedo, vec3( _Metalic));
    ambient = gl_LightModel.ambient.xyz ;
    ambient += (ShadeSH9( vec4( worldN, 1.00000)) * s.Albedo);
    return mix( ambient, refl, vec3( xll_saturate( s.Reflectivity )));
}
void surf( in Input IN, inout MySurfaceOutput o ) {
    vec4 c;
    float NdotV;
    c = texture2D( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz  * _Color.xyz );
    o.Alpha = c.w ;
    o.Specular = texture2D( _MainReflectivityTex, IN.uv_MainTex).x ;
    o.Roughness = texture2D( _MainRoughnessTex, IN.uv_MainTex).x ;
    o.Normal = UnpackNormal( texture2D( _BumpMap, IN.uv_BumpMap));
    NdotV = max( 0.000000, dot( o.Normal, normalize( IN.viewDir )));
    o.Reflectivity = (o.Specular * FresnelTerm( (_Refl0 * _Reflectivity), (_Refl90 * _Reflectivity), NdotV));
    o.Emission = GlobalIllumination( IN, o);
}
float OrenNayarTerm( in float roughness, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {
    float rSq;
    float NdotL;
    float NdotV;
    float a;
    float b;
    float y;
    float K1;
    float K2;
    float c1;
    float c2;
    float c3;
    float x;
    float e;
    rSq = (roughness * roughness);
    NdotL = LambertTermWithRolloff( normal, lightDir);
    NdotV = dot( normal, viewDir);
    a = max( acos( NdotV ), acos( NdotL ));
    b = min( acos( NdotV ), acos( NdotL ));
    y = dot( (viewDir - (normal * NdotV)), (lightDir - (normal * NdotL)));
    K1 = (rSq / (rSq + 0.330000));
    K2 = (rSq / (rSq + 0.0900000));
    c1 = (1.00000 - (0.500000 * K1));
    c2 = (0.450000 * K2);
    c2 *= (sin( a ) - (( (y >= 0.000000) ) ? ( 0.000000 ) : ( pow( ((2.00000 * b) * 0.318310), 3.00000) )));
    c3 = ((0.125000 * K2) * pow( (((4.00000 * a) * b) * 0.101321), 2.00000));
    x = ((y * c2) * tan( b ));
    e = (((1.00000 - abs( y )) * c3) * tan( ((a + b) / 2.00000) ));
    return ((c1 + x) + e);
}
float LambertTermWithRolloff( in vec3 normal, in vec3 lightDir ) {
    return (max( 0.000000, (dot( normal, lightDir) + _Rolloff)) / (1.00000 + (_Rolloff * 2.00000)));
}
float FresnelTerm( in float refl0, in float refl90, in float cosA ) {
    float t;
    t = pow( (1.00000 - cosA), _Falloff);
    return ((refl0 * (1.00000 - t)) + (refl90 * t));
}
float CTRoughnessTerm( in float roughness, in float NdotH ) {
    float mSq;
    float a;
    float b;
    float c;
    mSq = (roughness * roughness);
    a = (1.00000 / ((4.00000 * mSq) * pow( NdotH, 4.00000)));
    b = ((NdotH * NdotH) - 1.00000);
    c = ((mSq * NdotH) * NdotH);
    return (a * exp( (b / c) ));
}
float CTGeometricTerm( in float NdotL, in float NdotH, in float NdotV, in float VdotH ) {
    return min( 1.00000, min( (((2.00000 * NdotH) * NdotV) / VdotH), (((2.00000 * NdotH) * NdotL) / VdotH)));
}
float BlinnTermWithRolloff( in vec3 normal, in vec3 halfDir ) {
    return (max( 0.000000, (dot( normal, halfDir) + (_Rolloff * 2.00000))) / (1.00000 + (_Rolloff * 2.00000)));
}
float CookTorranceTerm( in float roughness, in float refl0, in float refl90, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {
    vec3 halfDir;
    float nl;
    float nh;
    float nv;
    float vh;
    float F;
    float G;
    float R;
    halfDir = normalize( (lightDir + viewDir) );
    nl = LambertTermWithRolloff( normal, lightDir);
    nh = BlinnTermWithRolloff( normal, halfDir);
    nv = max( 0.000000, dot( normal, viewDir));
    vh = max( 0.000000, dot( viewDir, halfDir));
    F = FresnelTerm( refl0, refl90, vh);
    G = CTGeometricTerm( nl, nh, nv, vh);
    R = CTRoughnessTerm( roughness, nh);
    R = max( 0.000000, R);
    return max( 0.000000, (((F * G) * R) / (nv * nl)));
}
vec4 LightingOrenNayar_CookTorrance( in MySurfaceOutput s, in vec3 lightDir, in vec3 viewDir, in float atten ) {
    vec3 normal;
    float nl;
    float diffRoughness;
    float specRoughness;
    float refl0;
    float refl90;
    float spec;
    vec3 specColor;
    vec3 diffColor;
    float diffScatter;
    vec4 c;
    normal = normalize( s.Normal );
    lightDir = normalize( lightDir );
    viewDir = normalize( viewDir );
    nl = LambertTermWithRolloff( normal, lightDir);
    diffRoughness = _Roughness2;
    specRoughness = max( 0.0100000, (_Roughness * s.Roughness));
    refl0 = (_Refl0 * _Reflectivity);
    refl90 = (_Refl90 * _Reflectivity);
    spec = CookTorranceTerm( specRoughness, refl0, refl90, normal, lightDir, viewDir);
    specColor = mix( (xlat_mutable_LightColor0.xyz  * 2.00000), s.Albedo, vec3( _Metalic));
    diffColor = (xlat_mutable_LightColor0.xyz  * 2.00000);
    diffScatter = OrenNayarTerm( diffRoughness, normal, lightDir, viewDir);
    c.xyz  = ((mix( ((s.Albedo * diffColor) * diffScatter), (specColor * spec), vec3( s.Reflectivity)) * nl) * atten);
    c.w  = s.Alpha;
    return c;
}
vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    MySurfaceOutput o;
    float atten = 1.00000;
    vec4 c;
    surfIN.uv_MainTex = IN.pack0.xy ;
    surfIN.uv_BumpMap = IN.pack0.zw ;
    surfIN.worldRefl = vec3( IN.TtoW0.w , IN.TtoW1.w , IN.TtoW2.w );
    surfIN.TtoW0 = IN.TtoW0.xyz ;
    surfIN.TtoW1 = IN.TtoW1.xyz ;
    surfIN.TtoW2 = IN.TtoW2.xyz ;
    surfIN.worldNormal = vec3( 0.000000);
    surfIN.TtoW0 = IN.TtoW0.xyz ;
    surfIN.TtoW1 = IN.TtoW1.xyz ;
    surfIN.TtoW2 = IN.TtoW2.xyz ;
    surfIN.viewDir = IN.viewDir;
    o.Albedo = vec3( 0.000000);
    o.Emission = vec3( 0.000000);
    o.Specular = 0.000000;
    o.Alpha = 0.000000;
    surf( surfIN, o);
    c = vec4( 0.000000);
    c = LightingOrenNayar_CookTorrance( o, IN.lightDir, normalize( vec3( IN.viewDir) ), atten);
    c.xyz  += (o.Albedo * IN.vlight);
    c.xyz  += o.Emission;
    return c;
}
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main() {
    vec4 xl_retval;
    xlat_mutable_LightColor0 = _LightColor0;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4( xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3( xlv_TEXCOORD1);
    xlt_IN.TtoW0 = vec4( xlv_TEXCOORD2);
    xlt_IN.TtoW1 = vec4( xlv_TEXCOORD3);
    xlt_IN.TtoW2 = vec4( xlv_TEXCOORD4);
    xlt_IN.lightDir = vec3( xlv_TEXCOORD5);
    xlt_IN.vlight = vec3( xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
