mat2 xll_transpose(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
vec2 xll_matrixindex (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
struct v2f_vertex_lit {
    vec2 uv;
    vec4 diff;
    vec4 spec;
};
struct v2f_img {
    vec4 pos;
    vec2 uv;
};
struct appdata_img {
    vec4 vertex;
    vec2 texcoord;
};
struct SurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Specular;
    float Gloss;
    float Alpha;
};
struct MySurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    float Reflectivity;
    float Specular;
    float Roughness;
    float Alpha;
};
struct Input {
    vec2 uv_MainTex;
    vec2 uv_BumpMap;
    vec3 viewDir;
    vec3 worldRefl;
    vec3 worldNormal;
    vec3 TtoW0;
    vec3 TtoW1;
    vec3 TtoW2;
};
struct v2f_surf {
    vec4 pos;
    vec4 pack0;
    vec3 viewDir;
    vec4 TtoW0;
    vec4 TtoW1;
    vec4 TtoW2;
    vec3 lightDir;
    vec3 vlight;
};
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform vec4 _BumpMap_ST;
uniform vec4 _MainTex_ST;
uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 unity_Scale;
vec3 ObjSpaceViewDir( in vec4 v );
vec3 ObjSpaceLightDir( in vec4 v );
v2f_surf vert_surf( in appdata_full v );
vec3 ObjSpaceViewDir( in vec4 v ) {
    vec3 objSpaceCameraPos;
    objSpaceCameraPos = (( _World2Object * vec4( _WorldSpaceCameraPos.xyz , 1.00000) ).xyz  * unity_Scale.w );
    return (objSpaceCameraPos - v.xyz );
}
vec3 ObjSpaceLightDir( in vec4 v ) {
    vec3 objSpaceLightPos;
    objSpaceLightPos = ( _World2Object * _WorldSpaceLightPos0 ).xyz ;
    return objSpaceLightPos.xyz ;
}
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    vec3 viewDir;
    vec3 worldRefl;
    vec3 binormal;
    mat3 rotation;
    vec3 worldN;
    vec3 lightDir;
    vec3 viewDirForLight;
    o.pos = ( gl_ModelViewProjectionMatrix * v.vertex );
    o.pack0.xy  = ((v.texcoord.xy  * _MainTex_ST.xy ) + _MainTex_ST.zw );
    o.pack0.zw  = ((v.texcoord.xy  * _BumpMap_ST.xy ) + _BumpMap_ST.zw );
    viewDir = ( -ObjSpaceViewDir( v.vertex) );
    worldRefl = ( xll_constructMat3( _Object2World) * viewDir );
    binormal = (cross( v.normal, v.tangent.xyz ) * v.tangent.w );
    rotation = xll_transpose( mat3( v.tangent.xyz , binormal, v.normal) );
    o.TtoW0 = (vec4( ( rotation * xll_matrixindex (_Object2World, 0).xyz  ), worldRefl.x ) * unity_Scale.w );
    o.TtoW1 = (vec4( ( rotation * xll_matrixindex (_Object2World, 1).xyz  ), worldRefl.y ) * unity_Scale.w );
    o.TtoW2 = (vec4( ( rotation * xll_matrixindex (_Object2World, 2).xyz  ), worldRefl.z ) * unity_Scale.w );
    worldN = ( xll_constructMat3( _Object2World) * (v.normal * unity_Scale.w ) );
    lightDir = ( rotation * ObjSpaceLightDir( v.vertex) );
    o.lightDir = lightDir;
    viewDirForLight = ( rotation * ObjSpaceViewDir( v.vertex) );
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.000000);
    return o;
}
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4( gl_Vertex);
    xlt_v.tangent = vec4( TANGENT);
    xlt_v.normal = vec3( gl_Normal);
    xlt_v.texcoord = vec4( gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4( gl_MultiTexCoord1);
    xlt_v.color = vec4( gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_TEXCOORD0 = vec4( xl_retval.pack0);
    xlv_TEXCOORD1 = vec3( xl_retval.viewDir);
    xlv_TEXCOORD2 = vec4( xl_retval.TtoW0);
    xlv_TEXCOORD3 = vec4( xl_retval.TtoW1);
    xlv_TEXCOORD4 = vec4( xl_retval.TtoW2);
    xlv_TEXCOORD5 = vec3( xl_retval.lightDir);
    xlv_TEXCOORD6 = vec3( xl_retval.vlight);
}
